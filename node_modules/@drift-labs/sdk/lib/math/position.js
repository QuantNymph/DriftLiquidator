"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateEntryPrice = exports.calculatePositionFundingPNL = exports.calculatePositionPNL = exports.calculateBaseAssetValue = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const numericConstants_1 = require("../constants/numericConstants");
const types_1 = require("../types");
const amm_1 = require("./amm");
/**
 * calculateBaseAssetValue
 * = market value of closing entire position
 * @param market
 * @param userPosition
 * @returns Base Asset Value. : Precision QUOTE_PRECISION
 */
function calculateBaseAssetValue(market, userPosition) {
    if (userPosition.baseAssetAmount.eq(numericConstants_1.ZERO)) {
        return numericConstants_1.ZERO;
    }
    const directionToClose = userPosition.baseAssetAmount.gt(numericConstants_1.ZERO)
        ? types_1.PositionDirection.SHORT
        : types_1.PositionDirection.LONG;
    const [newQuoteAssetReserve, _] = (0, amm_1.calculateAmmReservesAfterSwap)(market.amm, 'base', userPosition.baseAssetAmount.abs(), (0, amm_1.getSwapDirection)('base', directionToClose));
    switch (directionToClose) {
        case types_1.PositionDirection.SHORT:
            return market.amm.quoteAssetReserve
                .sub(newQuoteAssetReserve)
                .mul(market.amm.pegMultiplier)
                .div(numericConstants_1.AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO);
        case types_1.PositionDirection.LONG:
            return newQuoteAssetReserve
                .sub(market.amm.quoteAssetReserve)
                .mul(market.amm.pegMultiplier)
                .div(numericConstants_1.AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO);
    }
}
exports.calculateBaseAssetValue = calculateBaseAssetValue;
/**
 * calculatePositionPNL
 * = BaseAssetAmount * (Avg Exit Price - Avg Entry Price)
 * @param market
 * @param marketPosition
 * @param withFunding (adds unrealized funding payment pnl to result)
 * @returns BaseAssetAmount : Precision QUOTE_PRECISION
 */
function calculatePositionPNL(market, marketPosition, withFunding = false) {
    if (marketPosition.baseAssetAmount.eq(numericConstants_1.ZERO)) {
        return numericConstants_1.ZERO;
    }
    const baseAssetValue = calculateBaseAssetValue(market, marketPosition);
    let pnl;
    if (marketPosition.baseAssetAmount.gt(numericConstants_1.ZERO)) {
        pnl = baseAssetValue.sub(marketPosition.quoteAssetAmount);
    }
    else {
        pnl = marketPosition.quoteAssetAmount.sub(baseAssetValue).sub(numericConstants_1.ONE);
    }
    if (withFunding) {
        const fundingRatePnL = calculatePositionFundingPNL(market, marketPosition).div(numericConstants_1.PRICE_TO_QUOTE_PRECISION);
        pnl = pnl.add(fundingRatePnL);
    }
    return pnl;
}
exports.calculatePositionPNL = calculatePositionPNL;
/**
 *
 * @param market
 * @param marketPosition
 * @returns // TODO-PRECISION
 */
function calculatePositionFundingPNL(market, marketPosition) {
    if (marketPosition.baseAssetAmount.eq(numericConstants_1.ZERO)) {
        return numericConstants_1.ZERO;
    }
    let ammCumulativeFundingRate;
    if (marketPosition.baseAssetAmount.gt(numericConstants_1.ZERO)) {
        ammCumulativeFundingRate = market.amm.cumulativeFundingRateLong;
    }
    else {
        ammCumulativeFundingRate = market.amm.cumulativeFundingRateShort;
    }
    const perPositionFundingRate = ammCumulativeFundingRate
        .sub(marketPosition.lastCumulativeFundingRate)
        .mul(marketPosition.baseAssetAmount)
        .div(numericConstants_1.AMM_RESERVE_PRECISION)
        .div(numericConstants_1.FUNDING_PAYMENT_PRECISION)
        .mul(new bn_js_1.default(-1));
    return perPositionFundingRate;
}
exports.calculatePositionFundingPNL = calculatePositionFundingPNL;
/**
 *
 * @param userPosition
 * @returns Precision: MARK_PRICE_PRECISION (10^10)
 */
function calculateEntryPrice(userPosition) {
    if (userPosition.baseAssetAmount.eq(numericConstants_1.ZERO)) {
        return numericConstants_1.ZERO;
    }
    return userPosition.quoteAssetAmount
        .mul(numericConstants_1.MARK_PRICE_PRECISION)
        .mul(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO)
        .div(userPosition.baseAssetAmount)
        .abs();
}
exports.calculateEntryPrice = calculateEntryPrice;
