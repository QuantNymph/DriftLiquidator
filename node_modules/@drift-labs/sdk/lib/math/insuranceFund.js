"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateInsuranceFundSize = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
/**
 * In the case of a levered loss, the exchange first pays out undistributed fees and then the insurance fund.
 * Thus the de facto size of the insurance fund is the amount in the insurance vault plus the sum of each markets
 * undistributed fees.
 *
 * @param connection
 * @param state
 * @param marketsAccount
 * @returns Precision : QUOTE_ASSET_PRECISION
 */
function calculateInsuranceFundSize(connection, state, marketsAccount) {
    return __awaiter(this, void 0, void 0, function* () {
        const insuranceVaultPublicKey = state.insuranceVault;
        const insuranceVaultAmount = new bn_js_1.default((yield connection.getTokenAccountBalance(insuranceVaultPublicKey)).value.amount);
        return marketsAccount.markets.reduce((insuranceVaultAmount, market) => {
            return insuranceVaultAmount.add(market.amm.totalFee.div(new bn_js_1.default(2)));
        }, insuranceVaultAmount);
    });
}
exports.calculateInsuranceFundSize = calculateInsuranceFundSize;
