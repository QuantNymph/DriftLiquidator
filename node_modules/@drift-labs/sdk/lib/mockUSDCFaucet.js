"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockUSDCFaucet = void 0;
const anchor = __importStar(require("@project-serum/anchor"));
const anchor_1 = require("@project-serum/anchor");
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const mock_usdc_faucet_json_1 = __importDefault(require("./idl/mock_usdc_faucet.json"));
class MockUSDCFaucet {
    constructor(connection, wallet, programId, opts) {
        this.connection = connection;
        this.wallet = wallet;
        this.opts = opts || anchor_1.Provider.defaultOptions();
        const provider = new anchor_1.Provider(connection, wallet, this.opts);
        this.provider = provider;
        this.program = new anchor_1.Program(mock_usdc_faucet_json_1.default, programId, provider);
    }
    getMockUSDCFaucetStatePublicKeyAndNonce() {
        return __awaiter(this, void 0, void 0, function* () {
            return anchor.web3.PublicKey.findProgramAddress([Buffer.from(anchor.utils.bytes.utf8.encode('mock_usdc_faucet'))], this.program.programId);
        });
    }
    getMockUSDCFaucetStatePublicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.mockUSDCFaucetStatePublicKey) {
                return this.mockUSDCFaucetStatePublicKey;
            }
            this.mockUSDCFaucetStatePublicKey = (yield this.getMockUSDCFaucetStatePublicKeyAndNonce())[0];
            return this.mockUSDCFaucetStatePublicKey;
        });
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            const stateAccountRPCResponse = yield this.connection.getParsedAccountInfo(yield this.getMockUSDCFaucetStatePublicKey());
            if (stateAccountRPCResponse.value !== null) {
                throw new Error('Faucet already initialized');
            }
            const fakeUSDCMint = anchor.web3.Keypair.generate();
            const createUSDCMintAccountIx = web3_js_1.SystemProgram.createAccount({
                fromPubkey: this.wallet.publicKey,
                newAccountPubkey: fakeUSDCMint.publicKey,
                lamports: yield spl_token_1.Token.getMinBalanceRentForExemptMint(this.connection),
                space: spl_token_1.MintLayout.span,
                programId: spl_token_1.TOKEN_PROGRAM_ID,
            });
            const [mintAuthority, _mintAuthorityNonce] = yield web3_js_1.PublicKey.findProgramAddress([fakeUSDCMint.publicKey.toBuffer()], this.program.programId);
            const initUSDCMintIx = spl_token_1.Token.createInitMintInstruction(spl_token_1.TOKEN_PROGRAM_ID, fakeUSDCMint.publicKey, 6, mintAuthority, null);
            const [mockUSDCFaucetStatePublicKey, mockUSDCFaucetStateNonce] = yield this.getMockUSDCFaucetStatePublicKeyAndNonce();
            return yield this.program.rpc.initialize(mockUSDCFaucetStateNonce, {
                accounts: {
                    mockUsdcFaucetState: mockUSDCFaucetStatePublicKey,
                    admin: this.wallet.publicKey,
                    mintAccount: fakeUSDCMint.publicKey,
                    rent: web3_js_1.SYSVAR_RENT_PUBKEY,
                    systemProgram: anchor.web3.SystemProgram.programId,
                },
                instructions: [createUSDCMintAccountIx, initUSDCMintIx],
                signers: [fakeUSDCMint],
            });
        });
    }
    fetchState() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.account.mockUsdcFaucetState.fetch(yield this.getMockUSDCFaucetStatePublicKey());
        });
    }
    mintToUser(userTokenAccount, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = yield this.fetchState();
            return yield this.program.rpc.mintToUser(amount, {
                accounts: {
                    mockUsdcFaucetState: yield this.getMockUSDCFaucetStatePublicKey(),
                    mintAccount: state.mint,
                    userTokenAccount,
                    mintAuthority: state.mintAuthority,
                    tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                },
            });
        });
    }
    createAssociatedTokenAccountAndMintTo(userPublicKey, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            const [associatedTokenPublicKey, createAssociatedAccountIx, mintToTx] = yield this.createAssociatedTokenAccountAndMintToInstructions(userPublicKey, amount);
            const tx = new web3_js_1.Transaction().add(createAssociatedAccountIx).add(mintToTx);
            const txSig = yield this.program.provider.send(tx, [], this.opts);
            return [associatedTokenPublicKey, txSig];
        });
    }
    createAssociatedTokenAccountAndMintToInstructions(userPublicKey, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = yield this.fetchState();
            const associateTokenPublicKey = yield this.getAssosciatedMockUSDMintAddress({ userPubKey: userPublicKey });
            const createAssociatedAccountIx = spl_token_1.Token.createAssociatedTokenAccountInstruction(spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID, spl_token_1.TOKEN_PROGRAM_ID, state.mint, associateTokenPublicKey, userPublicKey, this.wallet.publicKey);
            const mintToIx = yield this.program.instruction.mintToUser(amount, {
                accounts: {
                    mockUsdcFaucetState: yield this.getMockUSDCFaucetStatePublicKey(),
                    mintAccount: state.mint,
                    userTokenAccount: associateTokenPublicKey,
                    mintAuthority: state.mintAuthority,
                    tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                },
            });
            return [associateTokenPublicKey, createAssociatedAccountIx, mintToIx];
        });
    }
    getAssosciatedMockUSDMintAddress(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = yield this.fetchState();
            return spl_token_1.Token.getAssociatedTokenAddress(spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID, spl_token_1.TOKEN_PROGRAM_ID, state.mint, props.userPubKey);
        });
    }
    getTokenAccountInfo(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const assosciatedKey = yield this.getAssosciatedMockUSDMintAddress(props);
            const state = yield this.fetchState();
            const token = new spl_token_1.Token(this.connection, state.mint, spl_token_1.TOKEN_PROGRAM_ID, 
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            this.provider.payer);
            return yield token.getAccountInfo(assosciatedKey);
        });
    }
    subscribeToTokenAccount(props) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const tokenAccountKey = yield this.getAssosciatedMockUSDMintAddress(props);
                props.callback(yield this.getTokenAccountInfo(props));
                // Couldn't find a way to do it using anchor framework subscription, someone on serum discord recommended this way
                this.connection.onAccountChange(tokenAccountKey, (_accountInfo /* accountInfo is a buffer which we don't know how to deserialize */) => __awaiter(this, void 0, void 0, function* () {
                    props.callback(yield this.getTokenAccountInfo(props));
                }));
                return true;
            }
            catch (e) {
                return false;
            }
        });
    }
}
exports.MockUSDCFaucet = MockUSDCFaucet;
