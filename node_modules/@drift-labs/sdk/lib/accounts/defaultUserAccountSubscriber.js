"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultUserAccountSubscriber = void 0;
const types_1 = require("./types");
const events_1 = require("events");
const addresses_1 = require("../addresses");
const webSocketAccountSubscriber_1 = require("./webSocketAccountSubscriber");
class DefaultUserAccountSubscriber {
    constructor(program, authority) {
        this.isSubscribed = false;
        this.program = program;
        this.authority = authority;
        this.eventEmitter = new events_1.EventEmitter();
    }
    subscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isSubscribed) {
                return true;
            }
            const userPublicKey = yield (0, addresses_1.getUserAccountPublicKey)(this.program.programId, this.authority);
            this.userDataAccountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber('user', this.program, userPublicKey);
            yield this.userDataAccountSubscriber.subscribe((data) => {
                this.eventEmitter.emit('userAccountData', data);
                this.eventEmitter.emit('update');
            });
            const userAccountData = this.userDataAccountSubscriber.data;
            this.userPositionsAccountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber('userPositions', this.program, userAccountData.positions);
            yield this.userPositionsAccountSubscriber.subscribe((data) => {
                this.eventEmitter.emit('userPositionsData', data);
                this.eventEmitter.emit('update');
            });
            this.eventEmitter.emit('update');
            this.isSubscribed = true;
            return true;
        });
    }
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all([
                this.userDataAccountSubscriber.fetch(),
                this.userPositionsAccountSubscriber.fetch(),
            ]);
        });
    }
    unsubscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isSubscribed) {
                return;
            }
            yield Promise.all([
                this.userDataAccountSubscriber.unsubscribe(),
                this.userPositionsAccountSubscriber.unsubscribe(),
            ]);
            this.isSubscribed = false;
        });
    }
    assertIsSubscribed() {
        if (!this.isSubscribed) {
            throw new types_1.NotSubscribedError('You must call `subscribe` before using this function');
        }
    }
    getUserAccount() {
        this.assertIsSubscribed();
        return this.userDataAccountSubscriber.data;
    }
    getUserPositionsAccount() {
        this.assertIsSubscribed();
        return this.userPositionsAccountSubscriber.data;
    }
}
exports.DefaultUserAccountSubscriber = DefaultUserAccountSubscriber;
