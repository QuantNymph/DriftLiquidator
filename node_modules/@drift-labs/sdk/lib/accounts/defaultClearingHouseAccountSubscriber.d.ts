/// <reference types="node" />
import { ClearingHouseAccountSubscriber, ClearingHouseAccountEvents, ClearingHouseAccountTypes } from './types';
import { AccountSubscriber } from './types';
import { DepositHistoryAccount, ExtendedCurveHistoryAccount, FundingPaymentHistoryAccount, FundingRateHistoryAccount, LiquidationHistoryAccount, MarketsAccount, StateAccount, TradeHistoryAccount } from '../types';
import { Program } from '@project-serum/anchor';
import StrictEventEmitter from 'strict-event-emitter-types';
import { EventEmitter } from 'events';
export declare class DefaultClearingHouseAccountSubscriber implements ClearingHouseAccountSubscriber {
    isSubscribed: boolean;
    program: Program;
    eventEmitter: StrictEventEmitter<EventEmitter, ClearingHouseAccountEvents>;
    stateAccountSubscriber?: AccountSubscriber<StateAccount>;
    marketsAccountSubscriber?: AccountSubscriber<MarketsAccount>;
    tradeHistoryAccountSubscriber?: AccountSubscriber<TradeHistoryAccount>;
    depositHistoryAccountSubscriber?: AccountSubscriber<DepositHistoryAccount>;
    fundingPaymentHistoryAccountSubscriber?: AccountSubscriber<FundingPaymentHistoryAccount>;
    fundingRateHistoryAccountSubscriber?: AccountSubscriber<FundingRateHistoryAccount>;
    curveHistoryAccountSubscriber?: AccountSubscriber<ExtendedCurveHistoryAccount>;
    liquidationHistoryAccountSubscriber?: AccountSubscriber<LiquidationHistoryAccount>;
    optionalExtraSubscriptions: ClearingHouseAccountTypes[];
    private isSubscribing;
    private subscriptionPromise;
    private subscriptionPromiseResolver;
    constructor(program: Program);
    subscribe(optionalSubscriptions?: ClearingHouseAccountTypes[]): Promise<boolean>;
    fetch(): Promise<void>;
    unsubscribe(): Promise<void>;
    assertIsSubscribed(): void;
    assertOptionalIsSubscribed(optionalSubscription: ClearingHouseAccountTypes): void;
    getStateAccount(): StateAccount;
    getMarketsAccount(): MarketsAccount;
    getTradeHistoryAccount(): TradeHistoryAccount;
    getDepositHistoryAccount(): DepositHistoryAccount;
    getFundingPaymentHistoryAccount(): FundingPaymentHistoryAccount;
    getFundingRateHistoryAccount(): FundingRateHistoryAccount;
    getCurveHistoryAccount(): ExtendedCurveHistoryAccount;
    getLiquidationHistoryAccount(): LiquidationHistoryAccount;
}
//# sourceMappingURL=defaultClearingHouseAccountSubscriber.d.ts.map