"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultClearingHouseAccountSubscriber = void 0;
const types_1 = require("./types");
const events_1 = require("events");
const addresses_1 = require("../addresses");
const webSocketAccountSubscriber_1 = require("./webSocketAccountSubscriber");
class DefaultClearingHouseAccountSubscriber {
    constructor(program) {
        this.optionalExtraSubscriptions = [];
        this.isSubscribing = false;
        this.isSubscribed = false;
        this.program = program;
        this.eventEmitter = new events_1.EventEmitter();
    }
    subscribe(optionalSubscriptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isSubscribed) {
                return true;
            }
            if (this.isSubscribing) {
                return yield this.subscriptionPromise;
            }
            this.isSubscribing = true;
            this.subscriptionPromise = new Promise((res) => {
                this.subscriptionPromiseResolver = res;
            });
            const statePublicKey = yield (0, addresses_1.getClearingHouseStateAccountPublicKey)(this.program.programId);
            // create and activate main state account subscription
            this.stateAccountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber('state', this.program, statePublicKey);
            yield this.stateAccountSubscriber.subscribe((data) => {
                this.eventEmitter.emit('stateAccountUpdate', data);
                this.eventEmitter.emit('update');
            });
            const state = this.stateAccountSubscriber.data;
            this.marketsAccountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber('markets', this.program, state.markets);
            yield this.marketsAccountSubscriber.subscribe((data) => {
                this.eventEmitter.emit('marketsAccountUpdate', data);
                this.eventEmitter.emit('update');
            });
            // create subscribers for other state accounts
            this.tradeHistoryAccountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber('tradeHistory', this.program, state.tradeHistory);
            this.depositHistoryAccountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber('depositHistory', this.program, state.depositHistory);
            this.fundingPaymentHistoryAccountSubscriber =
                new webSocketAccountSubscriber_1.WebSocketAccountSubscriber('fundingPaymentHistory', this.program, state.fundingPaymentHistory);
            this.fundingRateHistoryAccountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber('fundingRateHistory', this.program, state.fundingRateHistory);
            this.liquidationHistoryAccountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber('liquidationHistory', this.program, state.liquidationHistory);
            this.curveHistoryAccountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber('extendedCurveHistory', this.program, state.extendedCurveHistory);
            const extraSusbcribersToUse = [];
            if (optionalSubscriptions === null || optionalSubscriptions === void 0 ? void 0 : optionalSubscriptions.includes('tradeHistoryAccount'))
                extraSusbcribersToUse.push({
                    subscriber: this.tradeHistoryAccountSubscriber,
                    eventType: 'tradeHistoryAccountUpdate',
                });
            if (optionalSubscriptions === null || optionalSubscriptions === void 0 ? void 0 : optionalSubscriptions.includes('depositHistoryAccount'))
                extraSusbcribersToUse.push({
                    subscriber: this.depositHistoryAccountSubscriber,
                    eventType: 'depositHistoryAccountUpdate',
                });
            if (optionalSubscriptions === null || optionalSubscriptions === void 0 ? void 0 : optionalSubscriptions.includes('fundingPaymentHistoryAccount'))
                extraSusbcribersToUse.push({
                    subscriber: this.fundingPaymentHistoryAccountSubscriber,
                    eventType: 'fundingPaymentHistoryAccountUpdate',
                });
            if (optionalSubscriptions === null || optionalSubscriptions === void 0 ? void 0 : optionalSubscriptions.includes('fundingRateHistoryAccount'))
                extraSusbcribersToUse.push({
                    subscriber: this.fundingRateHistoryAccountSubscriber,
                    eventType: 'fundingRateHistoryAccountUpdate',
                });
            if (optionalSubscriptions === null || optionalSubscriptions === void 0 ? void 0 : optionalSubscriptions.includes('liquidationHistoryAccount'))
                extraSusbcribersToUse.push({
                    subscriber: this.liquidationHistoryAccountSubscriber,
                    eventType: 'liquidationHistoryAccountUpdate',
                });
            if (optionalSubscriptions === null || optionalSubscriptions === void 0 ? void 0 : optionalSubscriptions.includes('curveHistoryAccount'))
                extraSusbcribersToUse.push({
                    subscriber: this.curveHistoryAccountSubscriber,
                    eventType: 'curveHistoryAccountUpdate',
                });
            this.optionalExtraSubscriptions = optionalSubscriptions !== null && optionalSubscriptions !== void 0 ? optionalSubscriptions : [];
            // await all subcriptions in parallel to boost performance
            //// the state account subscription above can't happen in here, because some of these susbcriptions are dependent on clearing house state being available
            yield Promise.all(extraSusbcribersToUse.map(({ subscriber, eventType }) => subscriber.subscribe((data) => {
                this.eventEmitter.emit(eventType, data);
                this.eventEmitter.emit('update');
            })));
            this.eventEmitter.emit('update');
            this.isSubscribing = false;
            this.isSubscribed = true;
            this.subscriptionPromiseResolver(true);
            return true;
        });
    }
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isSubscribed) {
                return;
            }
            const promises = this.optionalExtraSubscriptions
                .map((optionalSubscription) => {
                const subscriber = `${optionalSubscription}Subscriber`;
                return this[subscriber].fetch();
            })
                .concat([
                this.stateAccountSubscriber.fetch(),
                this.marketsAccountSubscriber.fetch(),
            ]);
            yield Promise.all(promises);
        });
    }
    unsubscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isSubscribed) {
                return;
            }
            yield this.stateAccountSubscriber.unsubscribe();
            yield this.marketsAccountSubscriber.unsubscribe();
            if (this.optionalExtraSubscriptions.includes('tradeHistoryAccount')) {
                yield this.tradeHistoryAccountSubscriber.unsubscribe();
            }
            if (this.optionalExtraSubscriptions.includes('fundingRateHistoryAccount')) {
                yield this.fundingRateHistoryAccountSubscriber.unsubscribe();
            }
            if (this.optionalExtraSubscriptions.includes('fundingPaymentHistoryAccount')) {
                yield this.fundingPaymentHistoryAccountSubscriber.unsubscribe();
            }
            if (this.optionalExtraSubscriptions.includes('depositHistoryAccount')) {
                yield this.depositHistoryAccountSubscriber.unsubscribe();
            }
            if (this.optionalExtraSubscriptions.includes('curveHistoryAccount')) {
                yield this.curveHistoryAccountSubscriber.unsubscribe();
            }
            if (this.optionalExtraSubscriptions.includes('liquidationHistoryAccount')) {
                yield this.liquidationHistoryAccountSubscriber.unsubscribe();
            }
            this.isSubscribed = false;
        });
    }
    assertIsSubscribed() {
        if (!this.isSubscribed) {
            throw new types_1.NotSubscribedError('You must call `subscribe` before using this function');
        }
    }
    assertOptionalIsSubscribed(optionalSubscription) {
        if (!this.isSubscribed) {
            throw new types_1.NotSubscribedError('You must call `subscribe` before using this function');
        }
        if (!this.optionalExtraSubscriptions.includes(optionalSubscription)) {
            throw new types_1.NotSubscribedError(`You need to subscribe to the optional Clearing House account "${optionalSubscription}" to use this method`);
        }
    }
    getStateAccount() {
        this.assertIsSubscribed();
        return this.stateAccountSubscriber.data;
    }
    getMarketsAccount() {
        this.assertIsSubscribed();
        return this.marketsAccountSubscriber.data;
    }
    getTradeHistoryAccount() {
        this.assertIsSubscribed();
        this.assertOptionalIsSubscribed('tradeHistoryAccount');
        return this.tradeHistoryAccountSubscriber.data;
    }
    getDepositHistoryAccount() {
        this.assertIsSubscribed();
        this.assertOptionalIsSubscribed('depositHistoryAccount');
        return this.depositHistoryAccountSubscriber.data;
    }
    getFundingPaymentHistoryAccount() {
        this.assertIsSubscribed();
        this.assertOptionalIsSubscribed('fundingPaymentHistoryAccount');
        return this.fundingPaymentHistoryAccountSubscriber.data;
    }
    getFundingRateHistoryAccount() {
        this.assertIsSubscribed();
        this.assertOptionalIsSubscribed('fundingRateHistoryAccount');
        return this.fundingRateHistoryAccountSubscriber.data;
    }
    getCurveHistoryAccount() {
        this.assertIsSubscribed();
        this.assertOptionalIsSubscribed('curveHistoryAccount');
        return this.curveHistoryAccountSubscriber.data;
    }
    getLiquidationHistoryAccount() {
        this.assertIsSubscribed();
        this.assertOptionalIsSubscribed('liquidationHistoryAccount');
        return this.liquidationHistoryAccountSubscriber.data;
    }
}
exports.DefaultClearingHouseAccountSubscriber = DefaultClearingHouseAccountSubscriber;
