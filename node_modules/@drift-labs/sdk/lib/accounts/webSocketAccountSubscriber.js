"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketAccountSubscriber = void 0;
class WebSocketAccountSubscriber {
    constructor(accountName, program, accountPublicKey) {
        this.accountName = accountName;
        this.program = program;
        this.accountPublicKey = accountPublicKey;
    }
    subscribe(onChange) {
        return __awaiter(this, void 0, void 0, function* () {
            this.onChange = onChange;
            yield this.fetch();
            this.program.account[this.accountName]
                .subscribe(this.accountPublicKey, this.program.provider.opts.commitment)
                .on('change', (data) => __awaiter(this, void 0, void 0, function* () {
                this.data = data;
                this.onChange(data);
            }));
        });
    }
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const newData = (yield this.program.account[this.accountName].fetch(this.accountPublicKey));
            // if data has changed trigger update
            if (JSON.stringify(newData) !== JSON.stringify(this.data)) {
                this.data = newData;
                this.onChange(this.data);
            }
        });
    }
    unsubscribe() {
        return this.program.account[this.accountName].unsubscribe(this.accountPublicKey);
    }
}
exports.WebSocketAccountSubscriber = WebSocketAccountSubscriber;
