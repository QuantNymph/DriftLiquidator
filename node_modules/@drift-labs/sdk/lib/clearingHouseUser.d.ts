/// <reference types="node" />
import { PublicKey } from '@solana/web3.js';
import BN from 'bn.js';
import { EventEmitter } from 'events';
import StrictEventEmitter from 'strict-event-emitter-types';
import { ClearingHouse } from './clearingHouse';
import { UserAccount, UserPosition, UserPositionsAccount } from './types';
import { UserAccountSubscriber, UserAccountEvents } from './accounts/types';
import { PositionDirection } from '.';
export declare class ClearingHouseUser {
    clearingHouse: ClearingHouse;
    authority: PublicKey;
    accountSubscriber: UserAccountSubscriber;
    userAccountPublicKey?: PublicKey;
    isSubscribed: boolean;
    eventEmitter: StrictEventEmitter<EventEmitter, UserAccountEvents>;
    static from(clearingHouse: ClearingHouse, authority: PublicKey): ClearingHouseUser;
    constructor(clearingHouse: ClearingHouse, authority: PublicKey, accountSubscriber: UserAccountSubscriber);
    /**
     * Subscribe to ClearingHouseUser state accounts
     * @returns SusbcriptionSuccess result
     */
    subscribe(): Promise<boolean>;
    /**
     *	Forces the accountSubscriber to fetch account updates from rpc
     */
    fetchAccounts(): Promise<void>;
    unsubscribe(): Promise<void>;
    getUserAccount(): UserAccount;
    getUserPositionsAccount(): UserPositionsAccount;
    /**
     * Gets the user's current position for a given market. If the user has no position returns undefined
     * @param marketIndex
     * @returns userPosition
     */
    getUserPosition(marketIndex: BN): UserPosition | undefined;
    getEmptyPosition(marketIndex: BN): UserPosition;
    getUserAccountPublicKey(): Promise<PublicKey>;
    exists(): Promise<boolean>;
    /**
     * calculates Buying Power = FC * MAX_LEVERAGE
     * @returns : Precision QUOTE_PRECISION
     */
    getBuyingPower(): BN;
    /**
     * calculates Free Collateral = (TC - TPV) * MAX_LEVERAGE
     * @returns : Precision QUOTE_PRECISION
     */
    getFreeCollateral(): BN;
    /**
     * calculates unrealized position price pnl
     * @returns : Precision QUOTE_PRECISION
     */
    getUnrealizedPNL(withFunding?: boolean, marketIndex?: BN): BN;
    /**
     * calculates unrealized funding payment pnl
     * @returns : Precision QUOTE_PRECISION
     */
    getUnrealizedFundingPNL(marketIndex?: BN): BN;
    /**
     * calculates TotalCollateral: collateral + unrealized pnl
     * @returns : Precision QUOTE_PRECISION
     */
    getTotalCollateral(): BN;
    /**
     * calculates sum of position value across all positions
     * @returns : Precision QUOTE_PRECISION
     */
    getTotalPositionValue(): BN;
    /**
     * calculates position value from closing 100%
     * @returns : Precision QUOTE_PRECISION
     */
    getPositionValue(marketIndex: BN): BN;
    getPositionSide(currentPosition: Pick<UserPosition, 'baseAssetAmount'>): PositionDirection | undefined;
    /**
     * calculates average exit price for closing 100% of position
     * @returns : Precision MARK_PRICE_PRECISION
     */
    getPositionEstimatedExitPriceAndPnl(position: UserPosition, amountToClose?: BN): [BN, BN];
    /**
     * calculates current user leverage across all positions
     * @returns : Precision TEN_THOUSAND
     */
    getLeverage(): BN;
    /**
     * calculates max allowable leverage exceeding hitting requirement category
     * @params category {Initial, Partial, Maintenance}
     * @returns : Precision TEN_THOUSAND
     */
    getMaxLeverage(category?: 'Initial' | 'Partial' | 'Maintenance'): BN;
    /**
     * calculates margin ratio: total collateral / |total position value|
     * @returns : Precision TEN_THOUSAND
     */
    getMarginRatio(): BN;
    canBeLiquidated(): [boolean, BN];
    /**
     * Checks if any user position cumulative funding differs from respective market cumulative funding
     * @returns
     */
    needsToSettleFundingPayment(): boolean;
    /**
     * Calculate the liquidation price of a position, with optional parameter to calculate the liquidation price after a trade
     * @param targetMarket
     * @param positionBaseSizeChange // change in position size to calculate liquidation price for : Precision 10^13
     * @param partial
     * @returns Precision : MARK_PRICE_PRECISION
     */
    liquidationPriceOld(targetMarket: Pick<UserPosition, 'marketIndex'>, positionBaseSizeChange?: BN, partial?: boolean): BN;
    /**
     * Calculate the liquidation price of a position, with optional parameter to calculate the liquidation price after a trade
     * @param targetMarket
     * @param positionBaseSizeChange // change in position size to calculate liquidation price for : Precision 10^13
     * @param partial
     * @returns Precision : MARK_PRICE_PRECISION
     */
    liquidationPrice(targetMarket: Pick<UserPosition, 'marketIndex'>, positionBaseSizeChange?: BN, partial?: boolean): BN;
    /**
     * Calculates the estimated liquidation price for a position after closing a quote amount of the position.
     * @param positionMarketIndex
     * @param closeQuoteAmount
     * @returns : Precision MARK_PRICE_PRECISION
     */
    liquidationPriceAfterClose(positionMarketIndex: BN, closeQuoteAmount: BN): BN;
    /**
     * Get the maximum trade size for a given market, taking into account the user's current leverage, positions, collateral, etc.
     *
     * To Calculate Max Quote Available:
     *
     * Case 1: SameSide
     * 	=> Remaining quote to get to maxLeverage
     *
     * Case 2: NOT SameSide && currentLeverage <= maxLeverage
     * 	=> Current opposite position x2 + remaining to get to maxLeverage
     *
     * Case 3: NOT SameSide && currentLeverage > maxLeverage && otherPositions - currentPosition > maxLeverage
     * 	=> strictly reduce current position size
     *
     * Case 4: NOT SameSide && currentLeverage > maxLeverage && otherPositions - currentPosition < maxLeverage
     * 	=> current position + remaining to get to maxLeverage
     *
     * @param marketIndex
     * @param tradeSide
     * @param userMaxLeverageSetting - leverage : Precision TEN_THOUSAND
     * @returns tradeSizeAllowed : Precision QUOTE_PRECISION
     */
    getMaxTradeSizeUSDC(targetMarketIndex: BN, tradeSide: PositionDirection, userMaxLeverageSetting: BN): BN;
    /**
     * Returns the leverage ratio for the account after adding (or subtracting) the given quote size to the given position
     * @param targetMarketIndex
     * @param positionMarketIndex
     * @param tradeQuoteAmount
     * @returns leverageRatio : Precision TEN_THOUSAND
     */
    accountLeverageRatioAfterTrade(targetMarketIndex: BN, tradeQuoteAmount: BN, tradeSide: PositionDirection): BN;
    /**
     * Calculates how much fee will be taken for a given sized trade
     * @param quoteAmount
     * @returns feeForQuote : Precision QUOTE_PRECISION
     */
    calculateFeeForQuoteAmount(quoteAmount: BN): BN;
    /**
     * Get the total position value, excluding any position coming from the given target market
     * @param marketToIgnore
     * @returns positionValue : Precision QUOTE_PRECISION
     */
    private getTotalPositionValueExcludingMarket;
}
//# sourceMappingURL=clearingHouseUser.d.ts.map