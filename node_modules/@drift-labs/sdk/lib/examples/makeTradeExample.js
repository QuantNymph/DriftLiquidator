"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenAddress = void 0;
const anchor_1 = require("@project-serum/anchor");
const __1 = require("..");
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const __2 = require("..");
const getTokenAddress = (mintAddress, userPubKey) => {
    return spl_token_1.Token.getAssociatedTokenAddress(new web3_js_1.PublicKey(`ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`), spl_token_1.TOKEN_PROGRAM_ID, new web3_js_1.PublicKey(mintAddress), new web3_js_1.PublicKey(userPubKey));
};
exports.getTokenAddress = getTokenAddress;
const main = () => __awaiter(void 0, void 0, void 0, function* () {
    // Initialize Drift SDK
    const sdkConfig = (0, __2.initialize)({ env: 'devnet' });
    // Set up the Wallet and Provider
    const privateKey = process.env.BOT_PRIVATE_KEY; // stored as an array string
    const keypair = web3_js_1.Keypair.fromSecretKey(Uint8Array.from(JSON.parse(privateKey)));
    const wallet = new __1.Wallet(keypair);
    // Set up the Connection
    const rpcAddress = process.env.RPC_ADDRESS; // can use: https://api.devnet.solana.com for devnet; https://api.mainnet-beta.solana.com for mainnet;
    const connection = new web3_js_1.Connection(rpcAddress);
    // Set up the Provider
    const provider = new anchor_1.Provider(connection, wallet, anchor_1.Provider.defaultOptions());
    // Check SOL Balance
    const lamportsBalance = yield connection.getBalance(wallet.publicKey);
    console.log('SOL balance:', lamportsBalance / Math.pow(10, 9));
    // Misc. other things to set up
    const usdcTokenAddress = yield (0, exports.getTokenAddress)(sdkConfig.USDC_MINT_ADDRESS, wallet.publicKey.toString());
    // Set up the Drift Clearing House
    const clearingHousePublicKey = new web3_js_1.PublicKey(sdkConfig.CLEARING_HOUSE_PROGRAM_ID);
    const clearingHouse = __2.ClearingHouse.from(connection, provider.wallet, clearingHousePublicKey);
    yield clearingHouse.subscribe();
    // Set up Clearing House user client
    const user = __2.ClearingHouseUser.from(clearingHouse, wallet.publicKey);
    //// Check if clearing house account exists for the current wallet
    const userAccountExists = yield user.exists();
    if (!userAccountExists) {
        //// Create a Clearing House account by Depositing some USDC ($10,000 in this case)
        const depositAmount = new anchor_1.BN(10000).mul(__2.QUOTE_PRECISION);
        yield clearingHouse.initializeUserAccountAndDepositCollateral(depositAmount, yield (0, exports.getTokenAddress)(usdcTokenAddress.toString(), wallet.publicKey.toString()));
    }
    yield user.subscribe();
    // Get current price
    const solMarketInfo = __2.Markets.find((market) => market.baseAssetSymbol === 'SOL');
    const currentMarketPrice = (0, __2.calculateMarkPrice)(clearingHouse.getMarket(solMarketInfo.marketIndex));
    const formattedPrice = (0, __2.convertToNumber)(currentMarketPrice, __2.QUOTE_PRECISION);
    console.log(`Current Market Price is $${formattedPrice}`);
    // Estimate the slippage for a $5000 LONG trade
    const solMarketAccount = clearingHouse.getMarket(solMarketInfo.marketIndex);
    const longAmount = new anchor_1.BN(5000).mul(__2.QUOTE_PRECISION);
    const slippage = (0, __2.convertToNumber)((0, __2.calculateTradeSlippage)(__2.PositionDirection.LONG, longAmount, solMarketAccount)[0], __2.MARK_PRICE_PRECISION);
    console.log(`Slippage for a $5000 LONG on the SOL market would be $${slippage}`);
    // Make a $5000 LONG trade
    yield clearingHouse.openPosition(__2.PositionDirection.LONG, longAmount, solMarketInfo.marketIndex);
    console.log(`LONGED $5000 SOL`);
    // Reduce the position by $2000
    const reduceAmount = new anchor_1.BN(2000).mul(__2.QUOTE_PRECISION);
    yield clearingHouse.openPosition(__2.PositionDirection.SHORT, reduceAmount, solMarketInfo.marketIndex);
    // Close the rest of the position
    yield clearingHouse.closePosition(solMarketInfo.marketIndex);
});
main();
