"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Admin = void 0;
const web3_js_1 = require("@solana/web3.js");
const anchor_1 = require("@project-serum/anchor");
const anchor = __importStar(require("@project-serum/anchor"));
const addresses_1 = require("./addresses");
const spl_token_1 = require("@solana/spl-token");
const clearingHouse_1 = require("./clearingHouse");
const numericConstants_1 = require("./constants/numericConstants");
const clearing_house_json_1 = __importDefault(require("./idl/clearing_house.json"));
const defaultClearingHouseAccountSubscriber_1 = require("./accounts/defaultClearingHouseAccountSubscriber");
const defaultTxSender_1 = require("./tx/defaultTxSender");
const trade_1 = require("./math/trade");
const amm_1 = require("./math/amm");
class Admin extends clearingHouse_1.ClearingHouse {
    static from(connection, wallet, clearingHouseProgramId, opts = anchor_1.Provider.defaultOptions()) {
        const provider = new anchor_1.Provider(connection, wallet, opts);
        const program = new anchor_1.Program(clearing_house_json_1.default, clearingHouseProgramId, provider);
        const accountSubscriber = new defaultClearingHouseAccountSubscriber_1.DefaultClearingHouseAccountSubscriber(program);
        const txSender = new defaultTxSender_1.DefaultTxSender(provider);
        return new Admin(connection, wallet, program, accountSubscriber, txSender, opts);
    }
    initialize(usdcMint, adminControlsPrices) {
        return __awaiter(this, void 0, void 0, function* () {
            const stateAccountRPCResponse = yield this.connection.getParsedAccountInfo(yield this.getStatePublicKey());
            if (stateAccountRPCResponse.value !== null) {
                throw new Error('Clearing house already initialized');
            }
            const [collateralVaultPublicKey, collateralVaultNonce] = yield web3_js_1.PublicKey.findProgramAddress([Buffer.from(anchor.utils.bytes.utf8.encode('collateral_vault'))], this.program.programId);
            const [collateralVaultAuthority, _collateralVaultAuthorityNonce] = yield web3_js_1.PublicKey.findProgramAddress([collateralVaultPublicKey.toBuffer()], this.program.programId);
            const [insuranceVaultPublicKey, insuranceVaultNonce] = yield web3_js_1.PublicKey.findProgramAddress([Buffer.from(anchor.utils.bytes.utf8.encode('insurance_vault'))], this.program.programId);
            const [insuranceVaultAuthority, _insuranceVaultAuthorityNonce] = yield web3_js_1.PublicKey.findProgramAddress([insuranceVaultPublicKey.toBuffer()], this.program.programId);
            const markets = anchor.web3.Keypair.generate();
            const depositHistory = anchor.web3.Keypair.generate();
            const fundingRateHistory = anchor.web3.Keypair.generate();
            const fundingPaymentHistory = anchor.web3.Keypair.generate();
            const tradeHistory = anchor.web3.Keypair.generate();
            const liquidationHistory = anchor.web3.Keypair.generate();
            const curveHistory = anchor.web3.Keypair.generate();
            const [clearingHouseStatePublicKey, clearingHouseNonce] = yield (0, addresses_1.getClearingHouseStateAccountPublicKeyAndNonce)(this.program.programId);
            const initializeTx = yield this.program.transaction.initialize(clearingHouseNonce, collateralVaultNonce, insuranceVaultNonce, adminControlsPrices, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: clearingHouseStatePublicKey,
                    collateralMint: usdcMint,
                    collateralVault: collateralVaultPublicKey,
                    collateralVaultAuthority: collateralVaultAuthority,
                    insuranceVault: insuranceVaultPublicKey,
                    insuranceVaultAuthority: insuranceVaultAuthority,
                    markets: markets.publicKey,
                    rent: web3_js_1.SYSVAR_RENT_PUBKEY,
                    systemProgram: anchor.web3.SystemProgram.programId,
                    tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                },
                instructions: [
                    yield this.program.account.markets.createInstruction(markets),
                ],
            });
            const initializeTxSig = yield this.txSender.send(initializeTx, [markets], this.opts);
            const initializeHistoryTx = yield this.program.transaction.initializeHistory({
                accounts: {
                    admin: this.wallet.publicKey,
                    state: clearingHouseStatePublicKey,
                    depositHistory: depositHistory.publicKey,
                    fundingRateHistory: fundingRateHistory.publicKey,
                    fundingPaymentHistory: fundingPaymentHistory.publicKey,
                    tradeHistory: tradeHistory.publicKey,
                    liquidationHistory: liquidationHistory.publicKey,
                    curveHistory: curveHistory.publicKey,
                    rent: web3_js_1.SYSVAR_RENT_PUBKEY,
                    systemProgram: anchor.web3.SystemProgram.programId,
                },
                instructions: [
                    yield this.program.account.fundingRateHistory.createInstruction(fundingRateHistory),
                    yield this.program.account.fundingPaymentHistory.createInstruction(fundingPaymentHistory),
                    yield this.program.account.tradeHistory.createInstruction(tradeHistory),
                    yield this.program.account.liquidationHistory.createInstruction(liquidationHistory),
                    yield this.program.account.depositHistory.createInstruction(depositHistory),
                    yield this.program.account.extendedCurveHistory.createInstruction(curveHistory),
                ],
            });
            const initializeHistoryTxSig = yield this.txSender.send(initializeHistoryTx, [
                depositHistory,
                fundingPaymentHistory,
                tradeHistory,
                liquidationHistory,
                fundingRateHistory,
                curveHistory,
            ], this.opts);
            return [initializeTxSig, initializeHistoryTxSig];
        });
    }
    initializeMarket(marketIndex, priceOracle, baseAssetReserve, quoteAssetReserve, periodicity, pegMultiplier = numericConstants_1.PEG_PRECISION) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.getMarketsAccount().markets[marketIndex.toNumber()].initialized) {
                throw Error(`MarketIndex ${marketIndex.toNumber()} already initialized`);
            }
            const initializeMarketTx = yield this.program.transaction.initializeMarket(marketIndex, baseAssetReserve, quoteAssetReserve, periodicity, pegMultiplier, {
                accounts: {
                    state: yield this.getStatePublicKey(),
                    admin: this.wallet.publicKey,
                    oracle: priceOracle,
                    markets: this.getStateAccount().markets,
                },
            });
            return yield this.txSender.send(initializeMarketTx, [], this.opts);
        });
    }
    moveAmmPrice(baseAssetReserve, quoteAssetReserve, marketIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = this.getStateAccount();
            return yield this.program.rpc.moveAmmPrice(baseAssetReserve, quoteAssetReserve, marketIndex, {
                accounts: {
                    state: yield this.getStatePublicKey(),
                    admin: this.wallet.publicKey,
                    markets: state.markets,
                },
            });
        });
    }
    updateK(sqrtK, marketIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = this.getStateAccount();
            const markets = this.getMarketsAccount();
            const marketData = markets.markets[marketIndex.toNumber()];
            const ammData = marketData.amm;
            return yield this.program.rpc.updateK(sqrtK, marketIndex, {
                accounts: {
                    state: yield this.getStatePublicKey(),
                    admin: this.wallet.publicKey,
                    markets: state.markets,
                    curveHistory: state.extendedCurveHistory,
                    oracle: ammData.oracle,
                },
            });
        });
    }
    updateCurveHistory() {
        return __awaiter(this, void 0, void 0, function* () {
            const extendedCurveHistory = anchor.web3.Keypair.generate();
            const state = this.getStateAccount();
            return yield this.program.rpc.updateCurveHistory({
                accounts: {
                    state: yield this.getStatePublicKey(),
                    admin: this.wallet.publicKey,
                    curveHistory: state.curveHistory,
                    extendedCurveHistory: extendedCurveHistory.publicKey,
                },
                instructions: [
                    yield this.program.account.extendedCurveHistory.createInstruction(extendedCurveHistory),
                ],
                signers: [extendedCurveHistory],
            });
        });
    }
    moveAmmToPrice(marketIndex, targetPrice) {
        return __awaiter(this, void 0, void 0, function* () {
            const market = this.getMarket(marketIndex);
            const [direction, tradeSize, _] = (0, trade_1.calculateTargetPriceTrade)(market, targetPrice);
            const [newQuoteAssetAmount, newBaseAssetAmount] = (0, amm_1.calculateAmmReservesAfterSwap)(market.amm, 'quote', tradeSize, (0, amm_1.getSwapDirection)('quote', direction));
            const state = this.getStateAccount();
            return yield this.program.rpc.moveAmmPrice(newBaseAssetAmount, newQuoteAssetAmount, marketIndex, {
                accounts: {
                    state: yield this.getStatePublicKey(),
                    admin: this.wallet.publicKey,
                    markets: state.markets,
                },
            });
        });
    }
    repegAmmCurve(newPeg, marketIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = this.getStateAccount();
            const markets = this.getMarketsAccount();
            const marketData = markets.markets[marketIndex.toNumber()];
            const ammData = marketData.amm;
            return yield this.program.rpc.repegAmmCurve(newPeg, marketIndex, {
                accounts: {
                    state: yield this.getStatePublicKey(),
                    admin: this.wallet.publicKey,
                    oracle: ammData.oracle,
                    markets: state.markets,
                    curveHistory: state.extendedCurveHistory,
                },
            });
        });
    }
    updateAmmOracleTwap(marketIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = this.getStateAccount();
            const markets = this.getMarketsAccount();
            const marketData = markets.markets[marketIndex.toNumber()];
            const ammData = marketData.amm;
            return yield this.program.rpc.updateAmmOracleTwap(marketIndex, {
                accounts: {
                    state: yield this.getStatePublicKey(),
                    admin: this.wallet.publicKey,
                    oracle: ammData.oracle,
                    markets: state.markets,
                    curveHistory: state.extendedCurveHistory,
                },
            });
        });
    }
    resetAmmOracleTwap(marketIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = this.getStateAccount();
            const markets = this.getMarketsAccount();
            const marketData = markets.markets[marketIndex.toNumber()];
            const ammData = marketData.amm;
            return yield this.program.rpc.resetAmmOracleTwap(marketIndex, {
                accounts: {
                    state: yield this.getStatePublicKey(),
                    admin: this.wallet.publicKey,
                    oracle: ammData.oracle,
                    markets: state.markets,
                    curveHistory: state.extendedCurveHistory,
                },
            });
        });
    }
    withdrawFromInsuranceVault(amount, recipient) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = yield this.getStateAccount();
            return yield this.program.rpc.withdrawFromInsuranceVault(amount, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                    insuranceVault: state.insuranceVault,
                    insuranceVaultAuthority: state.insuranceVaultAuthority,
                    recipient: recipient,
                    tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                },
            });
        });
    }
    withdrawFees(marketIndex, amount, recipient) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = yield this.getStateAccount();
            return yield this.program.rpc.withdrawFees(marketIndex, amount, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                    markets: state.markets,
                    collateralVault: state.collateralVault,
                    collateralVaultAuthority: state.collateralVaultAuthority,
                    recipient: recipient,
                    tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                },
            });
        });
    }
    withdrawFromInsuranceVaultToMarket(marketIndex, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = yield this.getStateAccount();
            return yield this.program.rpc.withdrawFromInsuranceVaultToMarket(marketIndex, amount, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                    markets: state.markets,
                    insuranceVault: state.insuranceVault,
                    insuranceVaultAuthority: state.insuranceVaultAuthority,
                    collateralVault: state.collateralVault,
                    tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                },
            });
        });
    }
    updateAdmin(admin) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updateAdmin(admin, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    updateMarginRatio(marginRatioInitial, marginRatioPartial, marginRatioMaintenance) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updateMarginRatio(marginRatioInitial, marginRatioPartial, marginRatioMaintenance, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    updatePartialLiquidationClosePercentage(numerator, denominator) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updatePartialLiquidationClosePercentage(numerator, denominator, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    updatePartialLiquidationPenaltyPercentage(numerator, denominator) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updatePartialLiquidationPenaltyPercentage(numerator, denominator, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    updateFullLiquidationPenaltyPercentage(numerator, denominator) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updateFullLiquidationPenaltyPercentage(numerator, denominator, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    updatePartialLiquidationShareDenominator(denominator) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updatePartialLiquidationLiquidatorShareDenominator(denominator, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    updateFullLiquidationShareDenominator(denominator) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updateFullLiquidationLiquidatorShareDenominator(denominator, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    updateFee(fees) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updateFee(fees, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    updateOracleGuardRails(oracleGuardRails) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updateOracleGuardRails(oracleGuardRails, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    updateMarketOracle(marketIndex, oracle, oracleSource) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = this.getStateAccount();
            return yield this.program.rpc.updateMarketOracle(marketIndex, oracle, oracleSource, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                    markets: state.markets,
                },
            });
        });
    }
    updateMarketMinimumTradeSize(marketIndex, minimumTradeSize) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = this.getStateAccount();
            return yield this.program.rpc.updateMarketMinimumTradeSize(marketIndex, minimumTradeSize, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                    markets: state.markets,
                },
            });
        });
    }
    updateWhitelistMint(whitelistMint) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updateWhitelistMint(whitelistMint, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    updateDiscountMint(discountMint) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updateDiscountMint(discountMint, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    updateMaxDeposit(maxDeposit) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updateMaxDeposit(maxDeposit, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    updateFundingPaused(fundingPaused) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updateFundingPaused(fundingPaused, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    updateExchangePaused(exchangePaused) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.updateExchangePaused(exchangePaused, {
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
    disableAdminControlsPrices() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.rpc.disableAdminControlsPrices({
                accounts: {
                    admin: this.wallet.publicKey,
                    state: yield this.getStatePublicKey(),
                },
            });
        });
    }
}
exports.Admin = Admin;
