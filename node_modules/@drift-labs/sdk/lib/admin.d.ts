/// <reference types="bn.js" />
import { ConfirmOptions, Connection, PublicKey, TransactionSignature } from '@solana/web3.js';
import { FeeStructure, IWallet, OracleGuardRails, OracleSource } from './types';
import { BN } from '@project-serum/anchor';
import { ClearingHouse } from './clearingHouse';
export declare class Admin extends ClearingHouse {
    static from(connection: Connection, wallet: IWallet, clearingHouseProgramId: PublicKey, opts?: ConfirmOptions): Admin;
    initialize(usdcMint: PublicKey, adminControlsPrices: boolean): Promise<[TransactionSignature, TransactionSignature]>;
    initializeMarket(marketIndex: BN, priceOracle: PublicKey, baseAssetReserve: BN, quoteAssetReserve: BN, periodicity: BN, pegMultiplier?: BN): Promise<TransactionSignature>;
    moveAmmPrice(baseAssetReserve: BN, quoteAssetReserve: BN, marketIndex: BN): Promise<TransactionSignature>;
    updateK(sqrtK: BN, marketIndex: BN): Promise<TransactionSignature>;
    updateCurveHistory(): Promise<TransactionSignature>;
    moveAmmToPrice(marketIndex: BN, targetPrice: BN): Promise<TransactionSignature>;
    repegAmmCurve(newPeg: BN, marketIndex: BN): Promise<TransactionSignature>;
    updateAmmOracleTwap(marketIndex: BN): Promise<TransactionSignature>;
    resetAmmOracleTwap(marketIndex: BN): Promise<TransactionSignature>;
    withdrawFromInsuranceVault(amount: BN, recipient: PublicKey): Promise<TransactionSignature>;
    withdrawFees(marketIndex: BN, amount: BN, recipient: PublicKey): Promise<TransactionSignature>;
    withdrawFromInsuranceVaultToMarket(marketIndex: BN, amount: BN): Promise<TransactionSignature>;
    updateAdmin(admin: PublicKey): Promise<TransactionSignature>;
    updateMarginRatio(marginRatioInitial: BN, marginRatioPartial: BN, marginRatioMaintenance: BN): Promise<TransactionSignature>;
    updatePartialLiquidationClosePercentage(numerator: BN, denominator: BN): Promise<TransactionSignature>;
    updatePartialLiquidationPenaltyPercentage(numerator: BN, denominator: BN): Promise<TransactionSignature>;
    updateFullLiquidationPenaltyPercentage(numerator: BN, denominator: BN): Promise<TransactionSignature>;
    updatePartialLiquidationShareDenominator(denominator: BN): Promise<TransactionSignature>;
    updateFullLiquidationShareDenominator(denominator: BN): Promise<TransactionSignature>;
    updateFee(fees: FeeStructure): Promise<TransactionSignature>;
    updateOracleGuardRails(oracleGuardRails: OracleGuardRails): Promise<TransactionSignature>;
    updateMarketOracle(marketIndex: BN, oracle: PublicKey, oracleSource: OracleSource): Promise<TransactionSignature>;
    updateMarketMinimumTradeSize(marketIndex: BN, minimumTradeSize: BN): Promise<TransactionSignature>;
    updateWhitelistMint(whitelistMint?: PublicKey): Promise<TransactionSignature>;
    updateDiscountMint(discountMint: PublicKey): Promise<TransactionSignature>;
    updateMaxDeposit(maxDeposit: BN): Promise<TransactionSignature>;
    updateFundingPaused(fundingPaused: boolean): Promise<TransactionSignature>;
    updateExchangePaused(exchangePaused: boolean): Promise<TransactionSignature>;
    disableAdminControlsPrices(): Promise<TransactionSignature>;
}
//# sourceMappingURL=admin.d.ts.map