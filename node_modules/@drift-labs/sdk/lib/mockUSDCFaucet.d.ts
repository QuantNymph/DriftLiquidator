import * as anchor from '@project-serum/anchor';
import { Program, Provider } from '@project-serum/anchor';
import { AccountInfo } from '@solana/spl-token';
import { ConfirmOptions, Connection, PublicKey, TransactionInstruction, TransactionSignature } from '@solana/web3.js';
import BN from 'bn.js';
import { IWallet } from './types';
export declare class MockUSDCFaucet {
    connection: Connection;
    wallet: IWallet;
    program: Program;
    provider: Provider;
    opts?: ConfirmOptions;
    constructor(connection: Connection, wallet: IWallet, programId: PublicKey, opts?: ConfirmOptions);
    getMockUSDCFaucetStatePublicKeyAndNonce(): Promise<[
        PublicKey,
        number
    ]>;
    mockUSDCFaucetStatePublicKey?: PublicKey;
    getMockUSDCFaucetStatePublicKey(): Promise<PublicKey>;
    initialize(): Promise<TransactionSignature>;
    fetchState(): Promise<any>;
    mintToUser(userTokenAccount: PublicKey, amount: BN): Promise<TransactionSignature>;
    createAssociatedTokenAccountAndMintTo(userPublicKey: PublicKey, amount: BN): Promise<[PublicKey, TransactionSignature]>;
    createAssociatedTokenAccountAndMintToInstructions(userPublicKey: PublicKey, amount: BN): Promise<[PublicKey, TransactionInstruction, TransactionInstruction]>;
    getAssosciatedMockUSDMintAddress(props: {
        userPubKey: PublicKey;
    }): Promise<anchor.web3.PublicKey>;
    getTokenAccountInfo(props: {
        userPubKey: PublicKey;
    }): Promise<AccountInfo>;
    subscribeToTokenAccount(props: {
        userPubKey: PublicKey;
        callback: (accountInfo: AccountInfo) => void;
    }): Promise<boolean>;
}
//# sourceMappingURL=mockUSDCFaucet.d.ts.map