import { PublicKey, Transaction } from '@solana/web3.js';
import BN from 'bn.js';
export declare class SwapDirection {
    static readonly ADD: {
        add: {};
    };
    static readonly REMOVE: {
        remove: {};
    };
}
export declare class PositionDirection {
    static readonly LONG: {
        long: {};
    };
    static readonly SHORT: {
        short: {};
    };
}
export declare class OracleSource {
    static readonly PYTH: {
        pyth: {};
    };
    static readonly SWITCHBOARD: {
        switchboard: {};
    };
}
export declare enum TradeSide {
    None = 0,
    Buy = 1,
    Sell = 2
}
export declare type CandleResolution = '1' | '5' | '15' | '60' | '240' | 'D' | 'W' | 'M';
export declare type TradeHistoryAccount = {
    head: BN;
    tradeRecords: TradeRecord[];
};
export declare type DepositHistoryAccount = {
    head: BN;
    depositRecords: DepositRecord[];
};
export declare type ExtendedCurveHistoryAccount = {
    head: BN;
    curveRecords: ExtendedCurveRecord[];
};
export declare type FundingRateHistoryAccount = {
    head: BN;
    fundingRateRecords: FundingRateRecord[];
};
export declare type FundingPaymentHistoryAccount = {
    head: BN;
    fundingPaymentRecords: FundingPaymentRecord[];
};
export declare type LiquidationHistoryAccount = {
    head: BN;
    liquidationRecords: LiquidationRecord[];
};
export declare type DepositRecord = {
    ts: BN;
    recordId: BN;
    userAuthority: PublicKey;
    user: PublicKey;
    direction: {
        deposit?: any;
        withdraw?: any;
    };
    collateralBefore: BN;
    cumulativeDepositsBefore: BN;
    amount: BN;
};
export declare type ExtendedCurveRecord = {
    ts: BN;
    recordId: BN;
    marketIndex: BN;
    pegMultiplierBefore: BN;
    baseAssetReserveBefore: BN;
    quoteAssetReserveBefore: BN;
    sqrtKBefore: BN;
    pegMultiplierAfter: BN;
    baseAssetReserveAfter: BN;
    quoteAssetReserveAfter: BN;
    sqrtKAfter: BN;
    baseAssetAmountLong: BN;
    baseAssetAmountShort: BN;
    baseAssetAmount: BN;
    openInterest: BN;
    oraclePrice: BN;
    tradeId: BN;
};
export declare type TradeRecord = {
    ts: BN;
    recordId: BN;
    userAuthority: PublicKey;
    user: PublicKey;
    direction: {
        long?: any;
        short?: any;
    };
    baseAssetAmount: BN;
    quoteAssetAmount: BN;
    markPriceBefore: BN;
    markPriceAfter: BN;
    fee: BN;
    referrerReward: BN;
    refereeDiscount: BN;
    tokenDiscount: BN;
    marketIndex: BN;
    liquidation: boolean;
    oraclePrice: BN;
};
export declare type FundingRateRecord = {
    ts: BN;
    recordId: BN;
    marketIndex: BN;
    fundingRate: BN;
    cumulativeFundingRateLong: BN;
    cumulativeFundingRateShort: BN;
    oraclePriceTwap: BN;
    markPriceTwap: BN;
};
export declare type FundingPaymentRecord = {
    ts: BN;
    recordId: BN;
    userAuthority: PublicKey;
    user: PublicKey;
    marketIndex: BN;
    fundingPayment: BN;
    baseAssetAmount: BN;
    userLastCumulativeFunding: BN;
    userLastFundingRateTs: BN;
    ammCumulativeFundingLong: BN;
    ammCumulativeFundingShort: BN;
};
export declare type LiquidationRecord = {
    ts: BN;
    recordId: BN;
    userAuthority: PublicKey;
    user: PublicKey;
    partial: boolean;
    baseAssetValue: BN;
    baseAssetValueClosed: BN;
    liquidationFee: BN;
    feeToLiquidator: BN;
    feeToInsuranceFund: BN;
    liquidator: PublicKey;
    totalCollateral: BN;
    collateral: BN;
    unrealizedPnl: BN;
    marginRatio: BN;
};
export declare type StateAccount = {
    admin: PublicKey;
    fundingPaused: boolean;
    exchangePaused: boolean;
    adminControlsPrices: boolean;
    collateralMint: PublicKey;
    collateralVault: PublicKey;
    collateralVaultAuthority: PublicKey;
    collateralVaultNonce: number;
    insuranceVault: PublicKey;
    insuranceVaultAuthority: PublicKey;
    insuranceVaultNonce: number;
    marginRatioInitial: BN;
    marginRatioMaintenance: BN;
    marginRatioPartial: BN;
    markets: PublicKey;
    curveHistory: PublicKey;
    depositHistory: PublicKey;
    fundingRateHistory: PublicKey;
    fundingPaymentHistory: PublicKey;
    tradeHistory: PublicKey;
    liquidationHistory: PublicKey;
    partialLiquidationClosePercentageNumerator: BN;
    partialLiquidationClosePercentageDenominator: BN;
    partialLiquidationPenaltyPercentageNumerator: BN;
    partialLiquidationPenaltyPercentageDenominator: BN;
    fullLiquidationPenaltyPercentageNumerator: BN;
    fullLiquidationPenaltyPercentageDenominator: BN;
    partialLiquidationLiquidatorShareDenominator: BN;
    fullLiquidationLiquidatorShareDenominator: BN;
    feeStructure: FeeStructure;
    totalFee: BN;
    totalFeeWithdrawn: BN;
    whitelistMint: PublicKey;
    discountMint: PublicKey;
    oracleGuardRails: OracleGuardRails;
    maxDeposit: BN;
    extendedCurveHistory: PublicKey;
};
export declare type MarketsAccount = {
    accountIndex: BN;
    markets: Market[];
};
export declare type Market = {
    amm: AMM;
    baseAssetAmount: BN;
    baseAssetAmountLong: BN;
    baseAssetAmountShort: BN;
    initialized: boolean;
    openInterest: BN;
};
export declare type AMM = {
    baseAssetReserve: BN;
    sqrtK: BN;
    cumulativeFundingRate: BN;
    lastFundingRate: BN;
    lastFundingRateTs: BN;
    lastMarkPriceTwap: BN;
    lastMarkPriceTwapTs: BN;
    lastOraclePriceTwap: BN;
    lastOraclePriceTwapTs: BN;
    oracle: PublicKey;
    oracleSource: OracleSource;
    fundingPeriod: BN;
    quoteAssetReserve: BN;
    pegMultiplier: BN;
    cumulativeFundingRateLong: BN;
    cumulativeFundingRateShort: BN;
    cumulativeRepegRebateLong: BN;
    cumulativeRepegRebateShort: BN;
    totalFeeMinusDistributions: BN;
    totalFeeWithdrawn: BN;
    totalFee: BN;
    minimumTradeSize: BN;
    lastOraclePrice: BN;
};
export declare type UserPosition = {
    baseAssetAmount: BN;
    lastCumulativeFundingRate: BN;
    marketIndex: BN;
    quoteAssetAmount: BN;
};
export declare type UserPositionsAccount = {
    positions: UserPosition[];
    user: PublicKey;
};
export declare type UserAccount = {
    authority: PublicKey;
    collateral: BN;
    cumulativeDeposits: BN;
    positions: PublicKey;
    totalFeePaid: BN;
};
export interface IWallet {
    signTransaction(tx: Transaction): Promise<Transaction>;
    signAllTransactions(txs: Transaction[]): Promise<Transaction[]>;
    publicKey: PublicKey;
}
export declare type FeeStructure = {
    feeNumerator: BN;
    feeDenominator: BN;
    discountTokenTiers: {
        firstTier: {
            minimumBalance: BN;
            discountNumerator: BN;
            discountDenominator: BN;
        };
        secondTier: {
            minimumBalance: BN;
            discountNumerator: BN;
            discountDenominator: BN;
        };
        thirdTier: {
            minimumBalance: BN;
            discountNumerator: BN;
            discountDenominator: BN;
        };
        fourthTier: {
            minimumBalance: BN;
            discountNumerator: BN;
            discountDenominator: BN;
        };
    };
    referralDiscount: {
        referrerRewardNumerator: BN;
        referrerRewardDenominator: BN;
        refereeDiscountNumerator: BN;
        refereeDiscountDenominator: BN;
    };
};
export declare type OracleGuardRails = {
    priceDivergence: {
        markOracleDivergenceNumerator: BN;
        markOracleDivergenceDenominator: BN;
    };
    validity: {
        slotsBeforeStale: BN;
        confidenceIntervalMaxSize: BN;
        tooVolatileRatio: BN;
    };
    useForLiquidations: boolean;
};
//# sourceMappingURL=types.d.ts.map